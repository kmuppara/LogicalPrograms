List -> ArrayList, LinkedList, Vector are the classes under list interface.

ArrayList ->
	1. Resizable array. As more elements are added to ArrayList, its size is increased dynamically.
	2. Default initial capacity 10. Vector each time doubles its array size, while ArrayList grow 50% of its size each time not capacity.
	
LinkedList ->
	1. Implemented as a double linked list.
	2.Performance on add and remove is better than Arraylist, but worse on get and set methods.
	3. LinkedList, however, also implements Queue interface which adds more methods than ArrayList and Vector, such as offer(), peek(), poll(), etc.
	
Vector ->
	1. Similar with ArrayList, but it is synchronized.
	
	Methods:
		1. void add(int index,Object element) -> insert element into the invoking list at the index passed in the index
		2. object set(int index,Object element)	-> assign element to the location specified by index within the invoking list.
		3. object remove(int index) -> remove the element at position index from the invoking list and return the deleted element.
		4. object get(int index) -> return the object stored at the specified index within the invoking collection.
		5. ListIterator listIterator() -> return an iterator to the start of the invoking list.

Stack ->
	1. Java Stack is LIFO object. It extends Vector class, but supports only five operations. 
	2. Java Stack class has only one constructor which is empty or default constructor. 
	Methods:
		1. boolean empty(): Tests if this stack is empty.
		2. E peek(): Looks at the object at the top of this stack without removing it from the stack.
		3. E pop() : Removes the object at the top of this stack and returns that object as the value of this function.
		4. E push(E item) : Pushes an item onto the top of this stack.
		5. int search(Object o) : Returns the 1-based position where an object is on this stack.

