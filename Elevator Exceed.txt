package trypkg;
/*
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;*/
import java.util.*;

public class CG1 {

	public static void main(String[] args) {
		
	/*  
	input::
	 	2
		4
		3 150
		2 2 2
		2 3
		50 50
		3 4
		50 50
		4 4
		20 10
		2
		1 50
		2
		2 2
		50 50 
	output: 4 1
	*/
		//System.out.println("Enter elements...");
		List<Obj> objList = new ArrayList<Obj>();
		Scanner s = new Scanner(System.in);
		int testCases = Integer.parseInt(s.nextLine());
		for(int t=0; t<testCases; t++){
			Obj obj = new Obj();
			obj.setN(Integer.parseInt(s.nextLine()));			//n = no of floors
			String []pw = s.nextLine().split(" ");
			obj.setP(Integer.parseInt(pw[0]));					//p = max persons
			obj.setW(Integer.parseInt(pw[1])); 					//w = max weight
			obj.setWp(Arrays.asList(s.nextLine().split(" ")));  //wp = waiting persons from 1 to n-1 floor
			for(int i=0;i<2*(obj.getN()-1);i++){
				String[] temp = s.nextLine().split(" ");
				if(i%2==0){
					obj.getDf().addAll(Arrays.asList(temp));	//df = desired floor
				}
				else obj.getW_df().addAll(Arrays.asList(temp));	//w_df = weight of df
			}
			objList.add(obj);
		}
		
		for(Obj obj: objList){
			/*System.out.println("n.."+obj.getN());
			System.out.println("p.."+obj.getP());
			System.out.println("w.."+obj.getW());
			System.out.println("wp.."+obj.getWp());
			System.out.println("df.."+obj.getDf());
			System.out.println("w_df.."+obj.getW_df());*/
			for(int j=1;j<=obj.getN();j++){
				if(j == obj.getN()){
					System.out.println(j);
					break;
				}
				else{
					removeElements(obj, j);
					addElements(obj, j);
					if(exceedCondition(obj, j)){
						System.out.println(j);
						break;
					}
				}	
			}
		}
	}
	
	public static void removeElements(Obj obj, int floor){
		for(int i=0; i<obj.getDf().size(); i++){
			if(Integer.parseInt(obj.getDf().get(i))==floor){
				obj.setP_floor((obj.getP_floor()-1));
				obj.setW_floor(obj.getW_floor()-Integer.parseInt(obj.getW_df().get(i)));
			}
		}
	}
	public static void addElements(Obj obj, int floor){
		int np = Integer.parseInt(obj.getWp().get(floor-1));
		obj.setP_floor(obj.getP_floor()+np);
		int l_limit = 0;
		for(int j=0;j<floor-1;j++){
			l_limit+=Integer.parseInt(obj.getWp().get(j));
		}
		int u_limit = l_limit+np;
		for(int i=l_limit;i<u_limit;i++){
			obj.setW_floor(obj.getW_floor()+Integer.parseInt(obj.getW_df().get(i)));
		}
	}
	public static boolean exceedCondition(Obj obj, int floor){
		if(obj.getP_floor()>obj.getP() || obj.getW_floor()>obj.getW()){
			return true;
		}
		else return false;
	}
	

}

class Obj{
	int n = 0; //n = no of floors
	int p = 0; //p = max persons
	int w = 0; //w = max weight
	List<String> wp   = new ArrayList<String>();  //wp = waiting persons from 1 to n-1 floor 
	List<String> df   = new ArrayList<String>();  //df = desired floor
	List<String> w_df = new ArrayList<String>(); //w_df = weight of df
	int p_floor = 0;	//to track p at each floor
	int w_floor = 0;	//to track w at each floor
	
	public int getP_floor() {
		return p_floor;
	}
	public void setP_floor(int p_floor) {
		this.p_floor = p_floor;
	}
	public int getW_floor() {
		return w_floor;
	}
	public void setW_floor(int w_floor) {
		this.w_floor = w_floor;
	}
	public int getN() {
		return n;
	}
	public void setN(int n) {
		this.n = n;
	}
	public int getP() {
		return p;
	}
	public void setP(int p) {
		this.p = p;
	}
	public int getW() {
		return w;
	}
	public void setW(int w) {
		this.w = w;
	}
	public List<String> getWp() {
		return wp;
	}
	public void setWp(List<String> wp) {
		this.wp = wp;
	}
	public List<String> getDf() {
		return df;
	}
	public void setDf(List<String> df) {
		this.df = df;
	}
	public List<String> getW_df() {
		return w_df;
	}
	public void setW_df(List<String> w_df) {
		this.w_df = w_df;
	}
}
